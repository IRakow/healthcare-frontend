import { supabase } from '@/lib/supabase';

export default async function handler(req: Request) {
  if (req.method !== 'POST') {
    return new Response(JSON.stringify({ error: 'Method not allowed' }), {
      status: 405,
      headers: { 'Content-Type': 'application/json' }
    });
  }

  try {
    const { userId } = await req.json();
    
    // Get user email
    const { data: userData } = await supabase
      .from('users')
      .select('email')
      .eq('id', userId)
      .single();
      
    if (!userData?.email) {
      return new Response(JSON.stringify({ success: false, error: 'User not found' }), {
        status: 404,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // Get meal plans
    const { data: mealPlans } = await supabase
      .from('meal_plans')
      .select('ai_plan_text')
      .eq('patient_id', userId)
      .order('created_at', { ascending: true });

    const meals = mealPlans?.map(m => m.ai_plan_text) || [];
    
    // Format email content
    const emailContent = `
      <h2>Your Weekly Meal Plan</h2>
      ${meals.map((meal, i) => `
        <div style="margin-bottom: 20px;">
          <h3>Day ${i + 1}</h3>
          <p>${meal.replace(/\n/g, '<br>')}</p>
        </div>
      `).join('')}
      <p style="color: #666; font-size: 12px; margin-top: 30px;">
        Generated by Purity Health AI
      </p>
    `;

    // In a real implementation, you would send the email here
    // using a service like SendGrid, AWS SES, or nodemailer
    // For now, we'll simulate success
    
    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (error) {
    return new Response(JSON.stringify({ success: false, error: 'Internal server error' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}